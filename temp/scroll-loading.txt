/* eslint-disable react-native/no-inline-styles */
/* eslint-disable prettier/prettier */
/** * Sample React Native App * https://github.com/facebook/react-native * * Generated with the TypeScript template * https://github.com/react-native-community/react-native-template-typescript * * @format */
import React, {
  ReactElement,
  ReactNode,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import {
  StyleSheet,
  View,
  Text,
  StatusBar,
  Button,
  NativeModules,
  Platform,
  TouchableWithoutFeedback,
  Dimensions,
} from 'react-native';

import nodejs from 'nodejs-mobile-react-native';
import 'react-native-gesture-handler';
import 'react-native-get-random-values';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import Toast from 'react-native-simple-toast';
import { nanoid } from 'nanoid';
import {
  DataProvider,
  LayoutProvider,
  RecyclerListView,
} from 'recyclerlistview';
import FastImage from 'react-native-fast-image';

const { StatusBarManager } = NativeModules;
import { createDrawerNavigator } from '@react-navigation/drawer';

const Drawer = createDrawerNavigator();

function Home() {
  return (
    <Stack.Navigator
      initialRouteName="Demo"
      screenOptions={{
        // headerShown: false,

        gestureEnabled: true,
        cardOverlayEnabled: true,
        // headerStatusBarHeight:
        //   navigation
        //     .dangerouslyGetState()
        //     .routes.findIndex((r) => r.key === route.key) > 0
        //     ? 0
        //     : undefined,
      }}>
      <Stack.Screen
        name="Demo"
        options={{
          headerStyle: {
            elevation: 0,
            shadowColor: '#fff',
          },
          headerTitleStyle: {
            elevation: 0,
          },
          gestureEnabled: true,
        }}
        component={Demo}
      />
      <Stack.Screen
        options={{ gestureEnabled: true }}
        name="DemoDetails"
        component={DemoDetails}
      />
    </Stack.Navigator>
  );
}

function MyDrawer() {
  return (
    <Drawer.Navigator
      initialRouteName="Home"
      screenOptions={{ gestureEnabled: true, swipeEnabled: true }}>
      <Drawer.Screen name="Home" component={Home} />
      {/* <Drawer.Screen
        name="Article"
        component={() => (
          <View>
            <Text>dada</Text>
          </View>
        )}
      /> */}
    </Drawer.Navigator>
  );
}

var mapper = {
  View,
  Text,
} as any;

function RecyclerListViewContainer(props: any) {
  const { data } = props;
  let { width } = Dimensions.get('window');
  const [updating, setUpdating] = useState(false);
  const initDataProvider = useMemo(
    () =>
      new DataProvider((r1, r2) => {
        return r1.id !== r2.id;
      }).cloneWithRows(data),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [],
  );

  const [dataProvider, setDataProvider] = useState(initDataProvider);

  return (
    <RecyclerListView
      style={{ flex: 1, margin: 3 }}
      renderAheadOffset={500}
      onEndReachedThreshold={20}
      rowRenderer={(type, d) => {
        // console.log(d);
        return (
          <View
            style={{
              flex: 1,
              backgroundColor: 'lightgrey',
              margin: 3,
            }}>
            <FastImage
              style={{ width: 70, height: 200 }}
              resizeMode="contain"
              source={{ uri: d.cover }}
            />
            <Text>{d.name}</Text>
          </View>
        );
      }}
      layoutProvider={
        new LayoutProvider(
          () => {
            return 0;
          },
          (type, dim) => {
            dim.width = Math.floor(width - 6) / 2;
            dim.height = 250;
          },
        )
      }
      dataProvider={dataProvider}
      onEndReached={() => {
        console.log(dataProvider.getAllData().length);
        if (!updating) {
          nodejs.channel.once('event', (msg) => {
            console.log(count);
            count++;
            // console.log(msg.data);
            const d = dataProvider.getAllData();
            d.push(...msg.data);
            setDataProvider(dataProvider.cloneWithRows(d));
            setUpdating(false);
          });

          setUpdating(true);
          nodejs.channel.post('event', {
            eventName: 'list:fetch',
          });
        } else {
          Toast.show('updating');
        }
      }}
    />
  );
}

var count = 0;
function renderer(obj: any): ReactNode {
  let ele;

  if (obj.tag === 'RecyclerListView') {
    ele = <RecyclerListViewContainer data={obj.data} />;
  } else {
    console.log(1111);
    ele = React.createElement(
      mapper[obj.tag],
      { key: obj.id, ...obj.props },
      Array.isArray(obj.children)
        ? obj.children.map((ele) => {
            return renderer(ele);
          })
        : obj.children
        ? [obj.children]
        : null,
    );
  }

  return obj?.events?.includes('tap') ? (
    <TouchableWithoutFeedback
      key={Math.random().toString(36)}
      onPress={() => {
        // console.log('=================================');
        // console.log(obj);
        nodejs.channel.post('event', obj);
      }}>
      {ele}
    </TouchableWithoutFeedback>
  ) : (
    ele
  );
}

const news = Array(100)
  .fill('')
  .map(() => {
    const id = nanoid(16);
    return { title: id, id };
  });

// const createReact = () => {
//   React.createElement(RecyclerListView, {
//     renderAheadOffset: 500,
//     onEndReachedThreshold: 10,
//     rowRenderer(type, d) {
//       return (
//         <View style={{ flex: 1 }}>
//           <Text>{d.title}</Text>
//         </View>
//       );
//     },
//     layoutProvider: new LayoutProvider(
//       (index) => {
//         return 0;
//       },
//       (type, dim) => {
//         dim.width = width;
//         dim.height = 70;
//       },
//     ),
//     dataProvider: data,
//     onEndReached() {
//       console.log(data.getAllData().length);

//       const d = data.getAllData();

//       d.push(
//         ...Array(100)
//           .fill('')
//           .map(() => {
//             const id = nanoid(16);
//             return { title: id, id };
//           }),
//       );

//       setState(data.cloneWithRows(d));
//     },
//   });
// };

const Demo = (props) => {
  const [plugin, setPlugin] = useState<ReactElement | null>(null);

  if (Platform.OS === 'ios') {
    StatusBarManager.getHeight((height: any) => {});
  } else {
  }

  const [] = useState(
    new DataProvider((r1, r2) => {
      return r1.id !== r2.id;
    }).cloneWithRows(news),
  );

  const [] = useState(false);

  useEffect(() => {
    nodejs.start('boot.js');
    nodejs.channel.addListener('message', (msg) => {
      console.log('=================', msg);
      if (msg !== null && typeof msg === 'object') {
        // console.log(msg);
        try {
          const ele: any = renderer(msg);
          // console.log(ele);
          setPlugin(ele);
          // console.log(ele);
        } catch (err) {
          console.log(err);
        }
        // const a = React.createElement(msg.tag);
      }
    });
    nodejs.channel.addListener('event', () => {
      // console.log('event=================', msg);
    });
  }, []);

  return (
    <View
      style={{
        flex: 1,
      }}>
      <Button
        onPress={() => {
          nodejs.channel.send({
            // arg: ['add', 'react'],
            // installName: 'react',
            raw: `
            delete require.cache[require.resolve('/data/local/tmp/century-comic')]
            const plugin = require('/data/local/tmp/century-comic');
            plugin().then(val => {
              rnBridge.channel.send(val);
            })
            `,
          });
        }}
        title="click"
      />
      {plugin}
      {/* <ScrollView>
        <Button
          onPress={() => {
            nodejs.channel.send({
              // arg: ['add', 'react'],
              // installName: 'react',
              raw: `console.log(rnBridge.channel.removeAllListeners)`,
            });
          }}
          title="click"
        />
        <View style={{ height: 10 }} />
        <Button
          onPress={() => {
            navigation.push('DemoDetails');
          }}
          title="click"
        />
        <View style={{ height: 10 }} />
        <Button
          onPress={() => {
            navigation.openDrawer();
          }}
          title="click"
        />
        {plugin}
      </ScrollView> */}
      {/* <Button onPress={() => {}} title="click" /> */}
    </View>
  );
};

const Stack = createStackNavigator();

const DemoDetails = () => {
  return (
    <View>
      <Text>DemoDetails</Text>
    </View>
  );
};

const App = () => {
  return (
    <>
      <StatusBar
        barStyle="light-content"
        hidden={false}
        translucent={true}
        networkActivityIndicatorVisible={true}
        backgroundColor="rgba(0,0,0,0)"
      />
      <NavigationContainer>
        <MyDrawer />
      </NavigationContainer>
    </>
  );
};

export default App;



const cheerio = require('cheerio');
const got = require('got');
let rnBridge;

const { nanoid } = require('nanoid');
const basicUrl = 'https://www.bnmhapp.com';

try {
  rnBridge = require('rn-bridge');
} catch (error) {}

const eventArr = [];
let page = 1;

async function fetchComicInfo(url) {
  console.log(url);
  const res = await got.get(url);
  // console.log(res);
  const $ = cheerio.load(res.body);
  const coverUrl = $('.img mip-img').attr('src');
  const data = $('.data');
  const title = data.find('h4').text();
  let kind = data.find('.yac').text();
  let author = data.find('.dir').text();
  let updateTime = data.find('.act').text();
  const listItems = $('.list_block.show li a');

  if (typeof kind === 'string') kind = kind.split('：')[1];
  if (typeof author === 'string') author = author.split('：')[1];
  if (typeof updateTime === 'string') updateTime = updateTime.split('：')[1];

  const collections = [];

  for (const item of listItems) {
    const url = `https://www.bnmhapp.com${$(item).attr('href')}`;
    const content = $(item).text();
    collections.push({
      url,
      content,
    });
  }

  return {
    coverUrl,
    title,
    kind,
    author,
    updateTime,
    collections,
  };
}

async function fetchMainPageData(page) {
  const res = await got.get(
    `https://www.bnmhapp.com/index/list/region/1?page=${page}`,
  );

  const data = [];
  const $ = cheerio.load(res.body);
  // console.log($('.vbox'))
  for (var ele of $('.vbox')) {
    ele = $(ele);
    const href = `${basicUrl}${ele.find('a.vbox_t').attr('href')}`;
    const cover = ele.find('a mip-img').attr('src');
    const name = ele.find('.h4 a').text();
    const update = ele.find('.h4.red').text();
    data.push({ href, cover, name, update });
  }
  return data;
}

function Text({ value, onTap, children }) {
  return {
    tag: 'Text',
    props: {},
    children: value,
  };
}

async function Image({ children, ...props }) {
  const self = {
    tag: 'Image',
    id: nanoid(12),
    props: props,
    children,
  };
  return self;
}

async function Root({ onTap, children }) {
  return {
    tag: 'View',
    id: nanoid(12),
    children: await children(),
  };
}

async function View({ children, ...props }) {
  const id = nanoid(12);
  // console.log(props);
  const events = [];

  if (props.onTouch) {
    events.push('touch');

    rnBridge.channel.on('event', async (msg) => {
      if (msg.id === id) {
        // console.log(id, '#####', msg);
        props.onTouch();
      }
      // rnBridge.channel.post('event', { msg: msg, id });
    });

    // rnBridge.channel.removeAllListeners();
    // eventArr.push({
    //   id,
    //   onTouch: props.onTouch,
    //   onLongTouch: props.onLongTouch,
    // });
  }

  return {
    tag: 'View',
    id,
    children: children,
    props,
    isMiaoElement,
    events,
  };
}

async function Card({ src, value, key, onTouch }) {
  return View({
    key: key,
    onTouch,
    children: [
      await Image({
        source: { uri: src },
        style: {
          width: 100,
          height: 400,
        },
      }),
      Text({
        value,
      }),
    ],
  });
}

var count = 0;

async function RecyclerListView(props) {
  const id = nanoid(12);
  const { data } = props;

  const record = {
    id, //
    tag: 'RecyclerListView',
    data,
  };

  rnBridge.channel.on('event', async (msg) => {
    console.log(count, '#########');
    count++;
    if (msg.eventName === 'list:fetch') {
      record.data = await props.onFetch();
      rnBridge.channel.post('event', record);
    }
  });

  return record;
}

// function makeData(args) {
//   var saver = args;
//   return function () {};
// }

async function Page() {
  let currentPage = 1;
  const data = await fetchMainPageData(currentPage);

  return RecyclerListView({
    data,
    async onRefresh() {},
    async onFetch() {
      currentPage++;
      console.log('=======================================' + currentPage);
      return await fetchMainPageData(currentPage);
    },
  });
}

const plugin = async function () {
  return Page();
  // Root({
  //   children: () => Page(),
  // });
};

// async function main(params) {
//   // const a = await fetchComicInfo('https://www.bnmhapp.com/index/comic/19527');
//   console.log(await plugin());
//   await new Promise((resolve, reject) => setTimeout(resolve, 10000000));
// }
// main();

// async function delay(time) {
//   return new Promise((resolve, reject) => setTimeout(resolve, time));
// }

module.exports = plugin;
