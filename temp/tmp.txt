/* eslint-disable react-native/no-inline-styles */
/* eslint-disable prettier/prettier */
/** * Sample React Native App * https://github.com/facebook/react-native * * Generated with the TypeScript template * https://github.com/react-native-community/react-native-template-typescript * * @format */
import React, {
  FC,
  ReactElement,
  ReactNode,
  useEffect,
  useMemo,
  useState,
} from 'react';
import {
  SafeAreaView,
  StyleSheet,
  ScrollView,
  View,
  Text,
  StatusBar,
  Button,
  Image,
  NativeModules,
  Platform,
  TouchableWithoutFeedback,
  Linking,
  FlatList,
  RefreshControl,
  Dimensions,
} from 'react-native';

import nodejs from 'nodejs-mobile-react-native';
import 'react-native-gesture-handler';
import 'react-native-get-random-values';
import { NavigationContainer } from '@react-navigation/native';
import { Constants } from 'react-native-unimodules';
import {
  createStackNavigator,
  TransitionPresets,
} from '@react-navigation/stack';
import Toast from 'react-native-simple-toast';
import { nanoid } from 'nanoid';
import {
  DataProvider,
  LayoutProvider,
  RecyclerListView,
} from 'recyclerlistview';

declare const global: { HermesInternal: null | {} };

const { StatusBarManager } = NativeModules;
import { createDrawerNavigator } from '@react-navigation/drawer';

const Drawer = createDrawerNavigator();

function Home() {
  return (
    <Stack.Navigator
      initialRouteName="Demo"
      screenOptions={{
        // headerShown: false,

        gestureEnabled: true,
        cardOverlayEnabled: true,
        // headerStatusBarHeight:
        //   navigation
        //     .dangerouslyGetState()
        //     .routes.findIndex((r) => r.key === route.key) > 0
        //     ? 0
        //     : undefined,
      }}>
      <Stack.Screen
        name="Demo"
        options={{
          headerStyle: {
            elevation: 0,
            shadowColor: '#fff',
          },
          headerTitleStyle: {
            elevation: 0,
          },
          gestureEnabled: true,
        }}
        component={Demo}
      />
      <Stack.Screen
        options={{ gestureEnabled: true }}
        name="DemoDetails"
        component={DemoDetails}
      />
    </Stack.Navigator>
  );
}

function MyDrawer() {
  return (
    <Drawer.Navigator
      initialRouteName="Home"
      screenOptions={{ gestureEnabled: true, swipeEnabled: true }}>
      <Drawer.Screen name="Home" component={Home} />
      {/* <Drawer.Screen
        name="Article"
        component={() => (
          <View>
            <Text>dada</Text>
          </View>
        )}
      /> */}
    </Drawer.Navigator>
  );
}

type MiaoMiaoElement = {
  tag: string;
  props: any;
  children: MiaoMiaoElement[] | MiaoMiaoElement;
  id: string;
};

var mapper = {
  View,
  Image,
  Text,
} as any;

function eventMapper(tag: string) {
  switch (tag) {
    case 'View':
      break;
    case 'Image':
      break;
    case 'Text':
      break;
  }
}

function RecyclerListViewContainer(props: any) {
  const { data } = props;
  let { width } = Dimensions.get('window');
  const initDataProvider = useMemo(
    () =>
      new DataProvider((r1, r2) => {
        return r1.id !== r2.id;
      }).cloneWithRows(data),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [],
  );

  const [dataProvider, setDataProvider] = useState(initDataProvider);

  return (
    <RecyclerListView
      style={{ flex: 1, margin: 3 }}
      renderAheadOffset={500}
      onEndReachedThreshold={20}
      rowRenderer={(type, d) => {
        return (
          <View
            style={{
              flex: 1,
              backgroundColor: 'lightgrey',
              margin: 3,
            }}>
            <Text>{d.title}</Text>
          </View>
        );
      }}
      layoutProvider={
        new LayoutProvider(
          (index) => {
            return 0;
          },
          (type, dim) => {
            dim.width = Math.floor(width - 6) / 2;
            dim.height = 250;
          },
        )
      }
      dataProvider={dataProvider}
      onEndReached={() => {
        console.log(dataProvider.getAllData().length);

        nodejs.channel.addListener('event', (msg) => {
          if (msg.eventName === 'list:fetch') {
          }
        });

        nodejs.channel.post('event', {
          eventName: 'list:fetch',
        });
      }}
    />
  );
}

function renderer(obj: any): ReactNode {
  let ele;

  if (obj.tag === 'RecyclerListView') {
    ele = <RecyclerListViewContainer data={obj.data} />;
  } else {
    ele = React.createElement(
      mapper[obj.tag],
      { key: obj.id, ...obj.props },
      Array.isArray(obj.children)
        ? obj.children.map((ele) => {
            return renderer(ele);
          })
        : obj.children
        ? [obj.children]
        : null,
    );
  }

  return obj?.events?.includes('tap') ? (
    <TouchableWithoutFeedback
      key={Math.random().toString(36)}
      onPress={() => {
        // console.log('=================================');
        // console.log(obj);
        nodejs.channel.post('event', obj);
      }}>
      {ele}
    </TouchableWithoutFeedback>
  ) : (
    ele
  );
}

const Item = ({ item }) => {
  return (
    <View>
      <Text>{item.title}</Text>
    </View>
  );
};

const news = Array(100)
  .fill('')
  .map(() => {
    const id = nanoid(16);
    return { title: id, id };
  });

// const createReact = () => {
//   React.createElement(RecyclerListView, {
//     renderAheadOffset: 500,
//     onEndReachedThreshold: 10,
//     rowRenderer(type, d) {
//       return (
//         <View style={{ flex: 1 }}>
//           <Text>{d.title}</Text>
//         </View>
//       );
//     },
//     layoutProvider: new LayoutProvider(
//       (index) => {
//         return 0;
//       },
//       (type, dim) => {
//         dim.width = width;
//         dim.height = 70;
//       },
//     ),
//     dataProvider: data,
//     onEndReached() {
//       console.log(data.getAllData().length);

//       const d = data.getAllData();

//       d.push(
//         ...Array(100)
//           .fill('')
//           .map(() => {
//             const id = nanoid(16);
//             return { title: id, id };
//           }),
//       );

//       setState(data.cloneWithRows(d));
//     },
//   });
// };

const Demo = (props) => {
  const { navigation } = props;

  const [plugin, setPlugin] = useState<ReactElement | null>(null);

  let statusBarHeight;
  if (Platform.OS === 'ios') {
    StatusBarManager.getHeight((height: any) => {
      statusBarHeight = height;
    });
  } else {
    statusBarHeight = StatusBar.currentHeight;
  }

  const [data, setState] = useState(
    new DataProvider((r1, r2) => {
      return r1.id !== r2.id;
    }).cloneWithRows(news),
  );

  const [f, setF] = useState(false);

  useEffect(() => {
    nodejs.start('boot.js');
    nodejs.channel.addListener('message', (msg) => {
      console.log('=================', msg);
      if (msg !== null && msg.ui) {
        // console.log(msg);
        try {
          const ele: any = renderer(msg.ui);
          setPlugin(ele);
          // console.log(ele);
        } catch (err) {
          console.log(err);
        }
        // const a = React.createElement(msg.tag);
      }
    });
    nodejs.channel.addListener('event', (msg) => {
      // console.log('event=================', msg);
    });
  }, []);

  return (
    <View
      style={{
        flex: 1,
      }}>
      {/* <ScrollView>
        <Button
          onPress={() => {
            nodejs.channel.send({
              // arg: ['add', 'react'],
              // installName: 'react',
              raw: `console.log(rnBridge.channel.removeAllListeners)`,
            });
          }}
          title="click"
        />
        <View style={{ height: 10 }} />
        <Button
          onPress={() => {
            navigation.push('DemoDetails');
          }}
          title="click"
        />
        <View style={{ height: 10 }} />
        <Button
          onPress={() => {
            navigation.openDrawer();
          }}
          title="click"
        />
        {plugin}
      </ScrollView> */}
      <Button onPress={() => {}} title="click" />
    </View>
  );
};

const Stack = createStackNavigator();

const DemoDetails = () => {
  return (
    <View>
      <Text>DemoDetails</Text>
    </View>
  );
};

const config = {
  animation: 'spring',
  config: {
    stiffness: 1000,
    damping: 500,
    mass: 3,
    overshootClamping: true,
    restDisplacementThreshold: 0.01,
    restSpeedThreshold: 0.01,
  },
};

const App = () => {
  return (
    <>
      <StatusBar
        barStyle="light-content"
        hidden={false}
        translucent={true}
        networkActivityIndicatorVisible={true}
        backgroundColor="rgba(0,0,0,0)"
      />
      <NavigationContainer>
        <MyDrawer />
      </NavigationContainer>
    </>
  );
};

const styles = StyleSheet.create({
  scrollView: { backgroundColor: '#000' },
});

export default App;
