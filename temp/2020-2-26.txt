/* eslint-disable react-native/no-inline-styles */
/* eslint-disable prettier/prettier */

import React, { FC } from 'react';
import { Alert, Button, Text, useColorScheme, View } from 'react-native';
import * as Sentry from '@sentry/react-native';
import pkg from '../package.json';
import { makeAutoObservable } from 'mobx';
import { observer } from 'mobx-react-lite';
const isProd = process.env.NODE_ENV === 'production';
import { MiaoSwitch } from './components';

const reactNavigationV5Instrumentation = new Sentry.ReactNavigationV5Instrumentation();

Sentry.init({
  dsn:
    'https://637ee4cf67d64f938dcb64beb60faeda@o532771.ingest.sentry.io/5652068',
  environment: process.env.NODE_ENV,
  debug: !isProd,
  beforeSend: (e) => {
    // console.log('Event beforeSend:', e);
    return e;
  },
  maxBreadcrumbs: 150,
  integrations: [
    new Sentry.ReactNativeTracing({
      idleTimeout: 5000,
      routingInstrumentation: reactNavigationV5Instrumentation,
      tracingOrigins: ['localhost', /^\//, /^https:\/\//],
      //@ts-ignore
      beforeNavigate: (context: Sentry.ReactNavigationTransactionContext) => {
        if (context.data.route.name === 'ManualTracker') {
          context.sampled = false;
        }
        return context;
      },
    }),
  ],
  autoSessionTracking: true,
  sessionTrackingIntervalMillis: isProd ? 30000 : 5000,
  tracesSampleRate: 1.0,
  release: 'duoduomiao@' + pkg.version,
  dist: `${pkg.version}.0`,
});

class Demo {
  constructor() {
    makeAutoObservable(this);
  }
  age = 10;
  setAge() {
    this.age++;
  }
}

const demo = new Demo();

function Demo2({ age }) {
  console.log('###');
  return <Text>{age}</Text>;
}

const Demo1 = observer(() => {
  console.log('=========================');
  return (
    <View>
      <Button
        title="update"
        onPress={() => {
          demo.setAge();
        }}
      />
      <Demo2 age={demo.age} />
      <Text>{demo.age}</Text>
    </View>
  );
});

const createThreeButtonAlert = () =>
  Alert.alert('Alert Title', 'My Alert Msg', [
    {
      text: 'Ask me later',
      onPress: () => console.log('Ask me later pressed'),
    },
    {
      text: 'Cancel',
      onPress: () => console.log('Cancel Pressed'),
      style: 'cancel',
    },
    { text: 'OK', onPress: () => console.log('OK Pressed') },
  ]);

export const App: FC = function () {
  const colorScheme = useColorScheme();

  console.log('root');
  return (
    <View>
      <View style={{ height: 100 }} />
      <Button
        title="click"
        onPress={() => {
          // createThreeButtonAlert();
        }}
      />
      <Text>{colorScheme}</Text>
      <MiaoSwitch
        width={50}
        height={30}
        value={true}
        onValueChange={() => {}}
      />
      <Demo1 />
    </View>
  );
};




  // if (params?.pluginName) {
      //   const eventName = 'render-' + nanoid(16);
      //   console.log('========= useEffect ======== ', root);
      //   navigation.addListener('transitionEnd', (e) => {
      //     if (!root) {
      //       root = e.target;
      //     }
      //     console.log(e);
      //     console.log('========= useEffect ======== ', root);
      //     if (e.data.closing) {
      //       if (root === e.target) {
      //         nodejs.channel.removeAllListeners('pluginRoute');
      //         nodejs.channel.removeAllListeners('pluginRender');
      //         root = null;
      //       }
      //       // nodejs.channel.removeListener('pluginRoute');
      //       // nodejs.channel.removeListener('pluginRender');
      //     } else {
      //       nodejs.channel.post('global', {
      //         action: AM.PLUGIN_RENDER,
      //         pluginName: params!.pluginName,
      //         eventName,
      //       });
      //       nodejs.channel.once('pluginRoute', (msg) => {
      //         console.log('========= router ====================');
      //         navigation.push('PluginRuntimeScreen', {
      //           pluginName: '/data/local/tmp/century-comic',
      //         });
      //       });
      //       nodejs.channel.once('pluginRender', (msg) => {
      //         console.log(
      //           '============================render===================',
      //         );
      //         const entry = renderCarlaToReact(msg.data);
      //         setRenderMiao(entry);
      //         // switch (msg.action) {
      //         //   case AM.PLUGIN_RENDER:
      //         //     break;
      //         //   case 'route':
      //         //     console.log(msg);
      //         //     navigation.push('PluginRuntimeScreen', {
      //         //       pluginName: '/data/local/tmp/century-comic',
      //         //     });
      //         //     break;
      //         //   default:
      //         //     break;
      //         // }
      //       });
      //     }
      //   });
      // }